name: build-test-disk
on:
  workflow_dispatch:
    inputs:
      format:
        description: 'Format'
        default: 'd64'
        required: true
        type: choice
        options:
          - d64
          - d71

permissions:
  actions: read
  checks: read
  contents: read
  deployments: read
  id-token: none
  issues: none
  discussions: none
  packages: write
  pages: none
  pull-requests: read
  repository-projects: read
  security-events: none
  statuses: read

jobs:
  builddisk:
    runs-on: ubuntu-latest

    steps:
        - uses: actions/checkout@v4

        - name: Print selected format
          run: 'echo "Selected Format: ${{ inputs.format }}"'

        - name: install ubuntu packages
          uses: awalsh128/cache-apt-pkgs-action@latest
          with:
            packages: acme vice
            version: 1.0

        - name: Print hexdump Version
          run: 'hexdump -V'

        - name: Print acme Version
          run: 'acme -V'

        - name: Print python Version
          run: 'python3 -V'

        - name: Print c1541 Version
          run: 'c1541 -version'

        - name: Create build folder
          run: 'mkdir build'

        - name: Build bootsector
          run: 'acme -r build/bootsector.report src/bootsector.asm'

        - name: Build dmon128
          run: 'acme -r build/dmon128.report src/dmon128.asm'

        - name: Create empty disk image and show dir
          run: |
           c1541 -format "dmon128,6b" ${{ inputs.format }} dmon128.${{ inputs.format }} 8
           c1541 dmon128.${{ inputs.format }} -bpoke 18 0 4 0x14 0xfe
           c1541 dmon128.${{ inputs.format }} -bwrite build/bootsector.prg 1 0 8
           c1541 dmon128.${{ inputs.format }} -write build/dmon128.prg dmon128
           c1541 dmon128.${{ inputs.format }} -dir
           # c1541 dmon128.${{ inputs.format }} -block 18 0

#        - uses: baileyjm02/markdown-to-pdf@v1
#          with:
#            input_dir: docs
#            output_dir: pdfs
#            images_dir: docs/images
#            # for example <img src="./images/file-name.png">
#            image_import: ./images
#            # Default is true, can set to false to only get PDF files
#            build_html: false

        - name: zip files
          run: |
            zip --junk-paths dmon128.zip dmon128.${{ inputs.format }} README.md docs/description.md

        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            draft: false
            prerelease: true

        - name: Upload Release Asset
          id: upload-release-asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
            asset_path: ./dmon128.zip
            asset_name: dmon128.zip
            asset_content_type: application/zip
